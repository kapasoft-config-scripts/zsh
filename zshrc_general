##PROMPT Configurations##########
#PROMPT='%d%>:%{\e[0m%}'

####mount on booti
#sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) workflow-lib ~/tools/workflow-lib
#sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) workflow ~/workflow
#sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) ds_workflow ~/ds_workflow

#sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) dev-metronic /home/websites/dev/metronic

####Drush Exports###########
###Local Margots Mac
export WIDGET_BUILD_ROOT='/Users/maxit/Sites/drupal/config'


## GENERAL EXPORTS ############################################################################################################

#make command line and apache load the same php.ini
export PHPRC=/etc/php5/apache2/php.ini

#export PYTHONPATH=/usr/local/lib/python2.6/site-packages
#export PYTHONPATH=/Library/Python/2.7/site-packages

#export M2_HOME=/usr/local/maven
#export M2=$M2_HOME/bin

export CLICOLOR="xterm-color"

#export VERBOSE="nil"

#export USER_LIB=/Users/$USER/Documents/workspace/lib
 
#export JAVA_HOME=$(/usr/libexec/java_home)

#export SCALA_HOME=/usr/local/scala
#export NODE_PATH=/usr/local/lib/node_modules
#export SVN_EDITOR='/usr/local/bin/mate -w'

#export JAVA_OPTS="-Xms1538m -Xmx1538m -XX:MaxPermSize=512m"
#export JAVA_OPTS="-Xmx2048m -XX:MaxPermSize=512m"

#export GRADLE_OPTS="-Xms2048m -Xmx2048m -XX:MaxPermSize=1024m"
#export GRADLE_HOME='/Users/maxit/DevTools/Gradle/gradle-1.6'
#export GRADLE_OPTS="-Xmx2048m -XX:MaxPermSize=1024m"
#export GRADLE_REPOSITORY="$HOME/.gradle"

# for X11 forwarding, (need to have X11.app running (in applications/utilities after install))
#export DISPLAY="localhost:0.0"

export WORKSPACE_DIR=~/workspace
export WORKFLOW_DIR=~/ds_workflow
export WORKSPACE_PERS_DIR=~/workspace-personal
#export CATALINA_OPTS='-Xdebug -Xrunjdwp:transport=dt_socket,address=8999,server=y,suspend=n -Djava.awt.headless=true'
#export CATALINA_HOME='/usr/local/tomcat'

#export GRAILS_HOME='/Users/maxit/DevTools/grails/grails-2.1.2'
#export JODA_TIME_HOME='/DevTools/joda-time/joda-time-2.1'
#export JODA_TIME_HIBERNATE='/DevTools/joda-time-hibernate/joda-time-hibernate-1.3'
#export GRAILS_OPTS="-Xms2048m -Xmx2048m -XX:MaxPermSize=1024m"
#export GROOVY_HOME='/Users/maxit/DevTools/groovy-2.1.3'
#export VERTX_HOME='/usr/local/vertx'
#export DEV_TOOLS='/Users/maxit/DevTools'

#export MONGODB_HOME='/usr/local/mongodb'

#export RUBYOPT=rubygems
#export REDIS_HOME='/Users/maxit/DevTools/redis-2.6.11'

PATH="/opt/local/bin:/usr/local/bin:$HOME/bin:/usr/local/sbin:$PATH"

export WORDS=/usr/share/dict/words

export PATH


## GENERAL ############################################################################################################

function permissionEnabled() { sudo chmod -R 777 "$1" }

alias pe=permissionEnabled #permissions enable for some directory

alias dh='dirs -v'  # directory history

# Find a file with a pattern in name:

function findInFilePattern() { find . -name "$2" | xargs grep -ni "$1"  ; }
function findName() {grep -r "$1" "$2" ;}
function searchString() {grep -lr "$1" * }
function searchStringIgnoreI() {grep -lir "$1" * }

alias ss=searchString
alias ssi=searchStringIgnoreI
alias fe=findExec
alias fifp=findInFilePattern
alias fname=findName
# grep history
alias gh='fc -l 0 | grep'

# alias mv='nocorrect mv'       # no spelling correction on mv
# alias cp='nocorrect cp'
# alias mkdir='nocorrect mkdir'

md() {
    mkdir $1 && cd $1
}

alias cdw='cd ${WORKSPACE_DIR}'
alias cdwd='cd ${WORKFLOW_DIR}'
alias cdwp='cd ${WORKSPACE_PERS_DIR}'

cdWhichDirname() {
	cd $(dirname =$1) 
}
alias wcd=cdWhichDirname

alias spwd='pwd | pbcopy'  # copy the current working directory to the clipboard
alias pwp='pwd -P'

alias firefox='/Applications/Firefox.app/Contents/MacOS/firefox-bin --profilemanager'

alias ce='open -a Google\ Chrome --args --enable-experimental-extension-apis'

alias ipadchrome='open /Applications/Google\ Chrome.app   --args -user-agent="Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10"'


# takes rdf triple .nt file and emits subjectids
alias subjectids=getsubjectids

function getsubjectids() {
    cutcol 1 $1 | sed -e 's/<\(.*\)>/\1/'
}

# from steve losh tweet
alias collapse="sed -e 's/  */ /g'"
alias cuts="cut -d' '"
function psg() { ps auxww | grep $* | grep -v grep | collapse | cuts -f 2,11- }

alias mz='mate $ZSHDIR'  # open all .zshrc files in textmate
# function v() {
#     if [ -d $1 ]; then
#         BASEDIR=$1
#     elif [ -f $1 ]; then
#         BASEDIR=$(dirname $1)
#     else
#         BASEDIR='.'
#     fi
#     mvim -c "cd $BASEDIR" $@
# }
alias v='mvim'
alias vz='v $ZSHDIR'

alias pse='ps -ef | grep'

alias e='emacs'

alias ag='alias | grep -i'

alias update_locate='sudo /usr/libexec/locate.updatedb'

# copy the last command to your clipboard
alias clc='fc -ln -1 | pbcopy && echo $(pbpaste)'

# builtins don't have their own man page
alias manbi='man zshbuiltins'

###########Drupal/Drush########
export XDEBUG_CONFIG="idekey=PHPSTORM"

alias sapi=show_api
alias dca='drush cc all'
alias dc='drush cron'
alias dw=drushws 
alias dg=drushgrep
alias ddi=drushdisable
alias dd=drushdownload
alias de=drushenable
alias du=drushuninstall
alias dgc=drushgrepcommand

#alias dt=drop_tables
#alias id=import_db
#alias bud=backup_db

#alias bd=build_dist # 1=artifact_name, 2=ver, 3=artifact_type(i.e.module, theme)
#alias bda=build_dist_any #1=artifact_name, 2=ver, 3=artifact_type(i.e.module, theme) 4=min 5=base-theme 6=plus
#alias ba=build_artifact #1=artifact_name, 2=ver, 3=artifact_type(i.e.module, theme) --branch=? --min=?
#alias bt=build_test # 1=artifact_name, 2=ver 3=artifiact_type(i.e. module, theme) has to be run from site root
#alias bta=build_test_any # 1=artifact_name, 2=ver 3=artifiact_type(i.e. module, theme) has to be run from site root
#alias daa=deploy_artifact_any # 1=artifact_name, 2=ver, 3=artifact_type(i.e. module, theme), 4=min-ver, 5=plus, 6=env  has to be run from site root
#alias da=deploy_artifact # 1=artifact_name, 2=ver, 3=artifact_type(i.e. module, theme), 4=env, --branch=?, --min=? has to be run from site root
#alias ea=execute_action # 1=action_name, 2=par1, 3=par2(and so on)
#alias saa=stage_any_artifact # 1=artifact_name, 2=artifiact_type(i.e. module, theme) has to be run from site root

#alias sdi=site_destroy
#alias si=site_install # 1=dest_dir 2=make_file_name

#alias cs=config_site # 1=artifact_name, 2=env(i.e. dev, test,) 3=artifact_type(i.e. module, theme)
#alias cad=config_artifact_dependecies # 1=artifact_name, 2=type  3=env(i.e. dev, test, stage), 4=plus
#alias cas=config_artifact_settings # 1=artifact_name, 2=artifact_type(i.e. module, theme)
#alias ca=config_artifact # 1=artifact_name 2=artifact_type

alias st=assetStatus # 1=asset-name
alias info=assetInfo # 1=asset-name
alias diff=assetDiff # 1=artifact-name
alias up=updateWorkDir # 1=asset-name 2=artifact-name 3=message
alias up-all=updateWorkDirAll # 1=asset-name 2=message

function assetInfo(){
drush ea get_artifact_info --asset=$1 $*
}

function assetStatus(){
drush ea list_updated_artifacts --asset=$1 $*
}

function assetDiff(){
drush ea see_diff --param=$1 $*
}

function updateWorkDir(){
drush ea update_work_dir --asset=$1 --param=$2,$3 $*
}

function updateWorkDirAll(){
drush ea update_all_work_dir --asset=$1 --param=$2 $*
}

alias st=assetStatus # 1=asset-name
alias info=assetInfo # 1=asset-name
alias diff=assetDiff # 1=artifact-name
alias up=updateWorkDir # 1=artifact-name 2=message
alias up-all=updateWorkDirAll # 1=asset-name 2=message

function assetInfo(){
drush ea get_artifact_info --asset=$1 $*
}

function assetStatus(){
drush ea list_updated_artifacts --asset=$1 $*
}

function assetDiff(){
drush ea see_diff --param=$1 $*
}

function updateWorkDir(){
drush ea update_work_dir --param=$1,$2 $*
}

function updateWorkDirAll(){
drush ea update_all_work_dir --asset=$1 --param=$2 $*
}





function show_api(){
cat ~/tools/zsh/zshrc_general | grep -B $2 -A $3 $1
}


function drushgrepcommand(){
drush | grep -i $1
}

function drushdownload(){
drush dl $1
}

function drushuninstall(){
drush pm-uninstall $1
}

function drushenable(){
drush en $1
}

function drushdisable(){
drush pm-disable $1
}

function drushgrep(){
drush pml | grep $1
}

function drushws (){
drush ws --count=$1
}



alias mdf='mdfind -name'
alias mdlocate='mdfind' # I always forget about this spotlight search from the cmd line, this'll help me remember
alias mdfields='mdimport -X' // list the import formats 

alias myip="curl icanhazip.com"

alias httpcode='curl --write-out %{http_code} --head --silent --output /dev/null'

# global aliases
alias -g 21="2>&1"
alias -g G='| grep'
alias -g GI='| grep -i'
alias -g GV='| grep -v'
alias -g GE='| egrep'
alias -g PC="| pc"
alias -g XG="| xargs grep -ni"
alias -g L='| less'
alias -g PBC='| pbcopy'
alias -g X1="| xargs -L1"


alias sortlssize='sort -k 5 -n'

alias cutcol='cut -d\  -f'
#alias cutcol=pc
#pc() { awk "{print \$$1}" }  # print column

rot13 () { tr "[a-m][n-z][A-M][N-Z]" "[n-z][a-m][N-Z][A-M]" }

alias wdc="watch --differences=cumulative"

alias diffcol="diff -y -W 160" # side by side diff 160 columns wide

# still need to disown manually for some reason under OSX
alias fp="nohup /Applications/Firefox.app/Contents/MacOS/firefox -ProfileManager &"

alias duc='du -sh *(/)'

# forward requests from port 80 to 8080
alias ipfw80to8080='sudo ipfw add 100 fwd 127.0.0.1,8080 tcp from any to any 80 in'

# starts a server on port 8000 that makes the current directory browsable with a webbrowser
alias webshare='python -m SimpleHTTPServer'

function server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    python -m SimpleHTTPServer "$port"
}

alias oc='open -a Console.app'
alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I'

alias fsu='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT| grep -v Terminal | grep -v grep | grep -v iTerm | grep -v ssh | grep -v'

alias lcl='launchctl list'
alias lcs='launchctl start'

longestline() { awk '{ print length, $0}' $1 | sort -nr | head -1 }


# print the contents of a single line (passed in as an argument)
alias ol=onlyLine
function onlyLine() { awk 'NR == '$1' {print;exit}'; }

# split the input based on the first parameter, the 2nd parameter is either a 1 (show the left hand side) or a 2 (show the right hand side) after the split
alias so=splitOn
function splitOn() { sed -E 's/(.*)'$1'(.*)/\'$2'/'; }

# SSL #
alias sslserver=': SSL print out a list of the acceptable CAs for a server, as well as its public key, pass host:port; openssl s_client -prexit -showcerts -connect'
alias sslprintcert=': SSL print out the details of a cert using keytool; keytool -v -printcert -file'
alias sslprintcert2=': SSL print out the details of a cert using openssl; openssl x509 -noout -text -in'
alias sslstoredkeys=': SSL print out all of the keys in a keystore file; keytool -list -v -keystore'
alias sslstoredkeys2=': SSL print out all of the raw public keys in a keystore file; keytool -list -rfc -keystore'
alias sslcerthash=': SSL print out the hash for a certificate; openssl x509 -hash -noout -in' 

## TRAFFIC MONITORING ##

# Need to use ports/brew to install "tcpflow" for this to work
# for listening to external machines calling us
alias tcpf80='sudo tcpflow -c -i en1 port 80'
alias tcpf8080='sudo tcpflow -c -i en1 port 8080'


# for listening to loopback port where we're talking to ourselves
alias tcpfl8080='sudo tcpflow -c -i lo0 port 8080'
alias tcpflp='sudo tcpflow -c -i lo0 port' # add the port

alias tcpd8080="sudo tcpdump -s 0 -A -i lo0 'tcp port 8080 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'"

# Need to use ports/brew to install "wireshark" for this to work
alias tshark8080='sudo tshark -i lo0 -R "tcp.port == 8080" -w -'

# Need to use ports/brew to install "ngrep" for this to work
alias ngrep8080='sudo ngrep -q -l -W byline -d lo0 port 8080'
alias ngrepp='sudo ngrep -q -l -W byline -d lo0 port ' # just add the port

# show open ports
alias op='lsof -i'

alias openports='lsof -Pnl +M -i4'

alias nsop='netstat -tunl -p tcp'

# scan another machine's ports
alias nm='nmap -PN'


# from https://github.com/tednaleid/zsh-syntax-highlighting
if [ -z $ZSH_SYNTAX_HIGHLIGHTING ]; then
    export ZSH_SYNTAX_HIGHLIGHTING=~/tools/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if [ -e  ]; then
    source $ZSH_SYNTAX_HIGHLIGHTING
else 
    echo "Highlighting file not found at $ZSH_SYNTAX_HIGHLIGHTING, 'git clone git://github.com/zsh-users/zsh-syntax-highlighting.git' to get it"
fi

# add coloration to a file using python pygments: sudo easy_install pygments
#alias pyg='pygmentize -l ruby -P "style=native" -f rtf -o out.rtf '

alias jsonpretty='curl "$*" | python -mjson.tool | pygmentize -l javascript'
alias jsontidy='curl "$*" | python -mjson.tool'
alias pbjsonpretty='pbpaste | python -mjson.tool | pygmentize -l javascript'
alias pbjsontidy='pbpaste | python -mjson.tool'


# brew install xmlstarlet
# sudo easy_install pygments
alias xmlpretty='xml fo | pygmentize -l xml' 

function ps_status() {
    PID=$(ps -el | grep $1 | grep -v grep | cut -c 7-12)

    if [ $PID ]; then
        echo "$1 is runing, PID = $PID"
    else
        echo "$1 is not running"
    fi
}    

# httpie repl prompt, install with:
# brew install repl
# sudo easy_install pip
# sudo pip install httpie 
# repl http
alias httprepl='repl http'

alias ec2i=ec2_instance_info
function ec2_instance_info() {
	echo "information for current ec2 instance"
	for KEY in $(curl -s http://169.254.169.254/1.0/meta-data/); do
		echo "$KEY = $(curl -s http://169.254.169.254/1.0/meta-data/$KEY)"
	done;
}


alias sublproj=sublproject
function sublproject() {
    if [ -z $1 ]; then
        echo "missing required project name"
        exit 1
    fi

    PROJ=$1.sublime-project
    SCRIPT=$1.command

    cat <<EOF>$PROJ
{
    "folders":
    [
        {
            "path": "$(pwd)"
        }
    ]
}
EOF

    cat <<EOF>$SCRIPT
#! /usr/bin/env bash
BASEDIR=\$(dirname \$0)
cd \$BASEDIR
subl $PROJ
EOF
    chmod +x $SCRIPT

}

alias mvimproj=mvimproject
function mvimproject() {
    SCRIPT='mvimhere.command'
    if [ -n "$1.command
    fi
    cat <<EOF>$SCRIPT
#! /usr/bin/env sh
BASEDIR=\$(dirname \$0)
cd \$BASEDIR
mvim \$BASEDIR
EOF
    chmod +x $SCRIPT
}

alias po='open -a PeepOpen'

function pn() {
     open "peepopen://$1?editor=MacVim"
}

alias pnc='pn `pwd`'

alias pnb='cdb && pn `pwd`'

# from http://www.nanoant.com/programming/opening-specified-path-in-terminals-new-tab
alias twd=new_terminal_working_directory
function new_terminal_working_directory() {
osascript <<END	
	tell application "Terminal"
		tell application "System Events" to tell process "Terminal" to keystroke "t" using command down
	    do script "cd $(pwd)" in first window
	end tell
END
}

## VERSION CONTROL ############################################################################################################

alias gs="git status --short"
alias grh="git reset --hard"
alias gri='git rm --cached $(git ls-files --deleted)'
alias gt="gittower"

alias gb="git branch -avv"
# diff against master with difftool
alias gdm="git branchdiff"
alias gpd="git pull upstream develop"
alias gd="git diff"

alias grom="git rebase -p origin/master"

alias svn14="/usr/bin/svn"
alias svns="svn status"
alias hs="hg status -S"
alias ha="hg add -S"
alias ho="hg outgoing -S"
alias hi="hg incoming -S"
alias hd="hg diff -S"
alias hgh="hg heads -t"

alias svnchdiff='svn diff --diff-cmd ~/bin/svndiffshim.py'

vcst() {
	# print out all of the files with a passed in status flag (M - modified, A - added, ? - unknown, etc) (default ?)
	# expects first parameter to be the version control command (likely svn or hg)
	STATUS='\?'
	if [ -n "$2" ]
	then
		STATUS=$2
	fi
	$1 status . | egrep "^$STATUS" | awk '{print $2}'
}

alias svnst='vcst svn'
alias hgst='vcst hg'

alias hgdr=hgdiffrevs

hgdiffrevs() {
	diff <(hg slog --rev ify -nibt'
alias hga='hg annotate -un'

alias icdiff="hg diff --reverse http://hg/direct \$(ic)"
alias ogdiff="hg diff --reverse http://hg/direct \$(og)"


## GROOVY/GRAILS ############################################################################################################

alias rmideacache='rm -rf ~/Library/Caches/IntelliJIdea11/caches'

alias oi="open *.ipr"

alias tpush='hg commit || hg fetch && gta && hg push'
alias tspush='hg commit || hg fetch && splitTests.groovy && hg push'

alias idea='open -a /Applications/Maia-IU-95.214.app'
alias g='grails'

alias gkill='kill -9 $(jps | grep GrailsStarter | cut -f1 -d\ )'

export GRAILS_TEST_LOG_DIRECTORY=target/test-reports

function grailsTestOrder() {
    grep testsuite target/test-reports/TESTS-TestSuites.xml | grep -v testsuites | cut -d\  -f8-9 | sed -E 's/name="(.*)" package="(.*)"/\2.\1/' | grep .
}

alias testorder=grailsTestOrder

function grailsTestOrderTime() {
    # for some reason, sometimes they aren't in there in sorted order, so use the timestamp to order them.  Not perfect as it's precision is to the second and some tests can run in the same second
    grep testsuite target/test-reports/TESTS-TestSuites.xml | grep -v testsuites | cut -d\  -f8-12 | sed -E 's/name="([^"]*)" package="([^"]*)".*timestamp="([^"]*)"./\3 \2.\1/' | sort | cut -d\  -f2 | grep .
}

alias testorder=grailsTestOrderTime


alias alwaysbedebugginggrails='cp $GRAILS_HOME/bin/grails{,-nd} && sed -e 's/suspend=y/suspend=n/' $GRAILS_HOME/bin/grails-debug > $GRAILS_HOME/bin/grails && chmod +x $GRAILS_HOME/bin/grails'

alias testhtml='open target/**/index.html'

alias gtr='open target/test-reports/html/index.html'
alias ezs='vim ~/shared-zshrc/zshrc_general'

#hg shelving
alias hgli='hg attic'
alias hgs=shelve
alias hgu=unshelve

#database migration scripts
alias dbm=runDBM

#Maven Intall & Lookup
alias gmi='grails maven-install'
alias gmd='grails maven-deploy'
alias gmdr=deployinrepo
function deployinrepo (){
grails maven-deploy --repository=$1
}

# aliases where you can optionally pass in a set of tests to run (or no argument to run all tests in that group)
alias gtf='grails test-app -onlyFunctional'
alias grc='grails clean'
alias gta=grailsTestApp
alias gtad=grailsTestAppDebug
alias gtau=grailsTestAppUnit
alias gtaud=grailsTestAppUnitDebug
alias gtai=grailsTestAppIntegration
alias gtaid=grailsTestAppIntegrationDebug
alias gtaf=grailsTestAppFunc

# aliases that will rerun any failed tests (or all tests if there arent any failed tests)
alias gtafa=grailsTestAppFailed
alias gtadf=grailsTestAppDebugFailed
alias gtauf=grailsTestAppUnitFailed
alias gtaudf=grailsTestAppUnitDebugFailed
alias gtaif=grailsTestAppIntegrationFailed
alias gtaidf=grailsTestAppIntegrationDebugFailed
alias gtaff=grailsTestAppFuncFailed

function runDBM() { grails -Dgrails.env=bhbo dbm$1 }
function shelve() {hg attic-shelve $1}
function unshelve() {hg attic-unshelve $1}

function grailsTestApp() { grailsTest grails "" $1 }
function grailsTestAppFailed() { grailsFailedTests grails "" }

function grailsTestAppDebug() { grailsTest grails-debug "" $1 }
function grailsTestAppDebugFailed() { grailsFailedTests grails-debug "" }

function grailsTestAppUnit() { grailsTest grails unit: $1 }
function grailsTestAppUnitFailed() { grailsFailedTests grails unit: }

function grailsTestAppFunc() { grailsTest grails -onlyFunctional $1 }
function grailsTestAppFuncFailed() { grailsFailedTests grails -onlyFunctional }


function grailsTestAppUnitDebug() { grailsTest grails-debug unit: $1 }
function grailsTestAppUnitDebugFailed() { grailsFailedTests grails-debug unit: }

function grailsTestAppIntegration() { grailsTest grails integration: $1 }
function grailsTestAppIntegrationFailed() { grailsFailedTests grails integration: }

function grailsTestAppIntegrationDebug() { grailsTest grails-debug integration: $1 }
function grailsTestAppIntegrationDebugFailed() { grailsFailedTests grails-debug integration: }

function grailsFailedTests() {
	grailsTest $1 $2 -rerun
}

function grailsTest() {
	echo "Running: $1 test-app $2 $3 || open target/test-reports/html/index.html"
    # time $1 test-app -no-reports -echoOut $2 $3 || testlog
    # in grails 2 it's easier to just look at the reports with the `gtr` alias if things fail
    time $1 test-app $2 $3 || open target/test-reports/html/index.html
}

alias gtas='splitTests.groovy'
alias grd='grails refresh-dependencies'
alias gp='grails package'

alias gcdc='grails create-domain-class'

alias gc='grails console'
alias gcd='grails-debug console'

alias gra='grails run-app'
alias grad='grails-debug run-app'

# delete autogenerated unit test that was last argument of previous command, ex: grails create-domain com.example.Foo
alias dut='rm -i test/unit/$(echo ${${(z)$(fc -ln 0 | grep grails\ create | tail -1)}[3]} | sed -e 's/\\\\./\\\\//g')Tests.groovy'

alias mgroovy='mate $GROOVY_HOME'
alias vgroovy='v $GROOVY_HOME'
alias mgrails='mate $GRAILS_HOME'
alias vgrails='v $GRAILS_HOME'

# groovy each line, line implicit variable can pipe in file stream or do something like this
# to add "foo" to the end of each line and save it to a file
# groovy -p -e 'println "${line}foo"' < input.txt >> output.txt
alias gel='groovy -p -e'


alias g135='switchGrails "groovy-1.7.5" "grails-1.3.5"'
alias g136='switchGrails "groovy-1.8.4" "grails-1.3.6"'
alias g136g8='switchGrails "groovy-1.8.4" "grails-1.3.6"'
alias g137='switchGrails "groovy-1.7.5" "grails-1.3.7"'
alias g200='switchGrails "groovy-1.8.4" "grails-2.0.0"'
alias g201='switchGrails "groovy-1.8.6" "grails-2.0.1"'
alias g203='switchGrails "groovy-1.8.6" "grails-2.0.3"'
alias g204='switchGrails "groovy-1.8.6" "grails-2.0.4"'
alias g210='switchGrails "groovy-1.8.6" "grails-2.1.0"'
alias ggit='switchGrails "groovy-1.8.4" "grails-git"'

function switchGrails() {
	echo "Switching to groovy version: $1"
	echo "Switching to grails version: $2"
    sudo rm /usr/local/{groovy,grails}

    sudo ln -s /usr/local/$1 /usr/local/groovy
    sudo ln -s /usr/local/$2 /usr/local/grails
	echo "Done!"
	ls -latr /usr/local/{groovy,grails}
}

## CLOJURE ############################################################################################################

export CLOJURE_JAR=/usr/local/Cellar/clojure/1.3.0/clojure-1.3.0.jar

# installed with brew install nailgun
export NAILGUN_JAR='/usr/local/Cellar/nailgun/0.7.1/nailgun-0.7.1.jar'

export VIMCLOJURE_SERVER_JAR='/Users/tnaleid/bin/vimclojure/server-2.3.0.jar'

## POSTGRESQL ############################################################################################################

alias pg_start='pg_ctl -D ~/pgdata -l ~/pgdata/psql.log start'
alias pg_stop='pg_ctl -D ~/pgdata -l ~/pgdata/psql.log stop'
alias pg='pg_ctl -D ~/pgdata -l ~/pgdata/psql.log'

## MYSQL ############################################################################################################


# will prompt you for sudo password
#alias mysqlstart='sudo launchctl load -w /Library/LaunchDaemons/com.mysql.mysqld.plist'
alias mstart='sudo /opt/local/share/mysql55/support-files/mysql.server start'
alias mstop='sudo /opt/local/share/mysql55/support-files/mysql.server stop'

# will prompt you for sudo password and then root mysql password (by default it's blank)
alias mysqlstop='sudo launchctl unload -w /Library/LaunchDaemons/com.mysql.mysqld.plist'

function mysqltop() {
	MYSQL_OPTS=$@
    watch -n 5 --differences "mysql $MYSQL_OPTS -e 'show processlist'"
}

##APACHE######################
alias ra='sudo /opt/local/apache2/bin/apachectl restart'

## REDIS ############################################################################################################

alias rstart='redis-server'
alias redisstop='sudo launchctl stop io.redis.redis-server'
alias redisstatus='redis-cli ping'

alias rc='redis-cli'
alias rcfa='redis-cli flushall'
alias rcdb='redis-cli flushdb'
alias rcm='redis-cli monitor | grep -v \"LPOP\"\ \"resque:queue:'



## RABBITMQ ############################################################################################################

# to get these to work, I needed to chown the directory created by brew (I might have sudo'ed something I should not have):
#    cd /usr/local/var/lib/rabbitmq
#    sudo chown -R `whoami`:staff rabbitmq
#
alias rabbitmqstart='launchctl start com.rabbitmq.rabbitmq-server'
alias rabbitmqstop='launchctl stop com.rabbitmq.rabbitmq-server'
alias rabbitmqstatus='rabbitmqctl status'


## RUBY #############################################################################################################

# rvm loading
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session.


## GRADLE ##########################################################################################################

function newgradle() {
    echo "Creating files for new gradle project"

    cat <<EOF>.gitignore
*.un~
*.iml
*.ipr
*.iws
build
.gradle
EOF
    
    cat <<EOF>build.gradle
apply plugin: 'groovy'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    groovy 'org.codehaus.groovy:groovy-all:1.8.6'
    groovy 'org.apache.ivy:ivy:2.2.0'
    testCompile 'junit:junit:4.10'
}

task createSourceDirs(description : 'Create empty source directories for all defined sourceSets') << {
    sourceSets*.allSource.srcDirs.flatten().each { File sourceDirectory ->
        if (!sourceDirectory.exists()) {
            println "Making \$sourceDirectory"
            sourceDirectory.mkdirs()
        }
    }
}

wrapper(type: Wrapper)
    gradleVersion = '1.0'
}

idea {
    project {
        jdkName = '1.6'
        ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
            }
        }
    }
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
EOF

    gradle createSourceDirs

    git init
    ls -a1 && find src    # list all created assets
}

## HADOOP ##########################################################################################################

export HADOOP_VERSION=hadoop-0.20.2-cdh3u3
#export HADOOP_VERSION=hadoop-0.20.205.0
#export HADOOP_HOME="/usr/local/$HADOOP_VERSION"
#export HADOOP_INSTALL=$HADOOP_HOME
#export PATH=$PATH:$HADOOP_HOME/bin

#export HADOOP_HEAPSIZE=2000
#export HADOOP_OPTS="-Djava.security.krb5.realm= -Djava.security.krb5.kdc="

alias hadoopstart='start-all.sh'
alias hadoopstop='stop-all.sh'
alias hadoopstatus="jps | egrep '(TaskTracker|JobTracker|DataNode|NameNode|SecondaryNameNode)'"

# delete localhost entry from known hosts so we can loopback connect to various machines for hadoop
alias dkh='wc -l ~/.ssh/known_hosts && cp ~/.ssh/known_hosts ~/.ssh/known_hosts.bak && grep -v localhost ~/.ssh/known_hosts.bak > ~/.ssh/known_hosts && wc -l ~/.ssh/known_hosts'

# hadoop dfs commands
for CMD in "ls" "cat" "tail" "rm" "rmr" "mkdir" "chown" "chmod"; do
    alias "h$CMD"="hadoop dfs -$CMD"
done

###NODE.JS########################################
alias fsa='forever stopall'
alias fs=foreverstop
function foreverstop() {
   forever stop $1
}
alias fst='forever start'
alias fl='forever list'
alias ns='npm start'

##NEXUS###############
alias snexus='/usr/local/nexus/bin/nexus start'

## TOMCAT/CATALINA ##########################################################################################################

alias cdtl="cd $CATALINA_HOME/logs"
alias tstart="catalina start"
alias tstop="catalina stop"
alias trestart="tstop; tstart"
alias ttail="cdtl && tail -100F catalina.out"
alias tstatus='ps_status "tomcat"'

alias sshtailtomcat=tailtomcat
function tailtomcat() {
    ssh $1 tail -f /var/log/tomcat6/catalina.out
}



npp () {
    /cygdrive/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe -multiInst -nosession -noPlugin $(cygpath -w -- "$@")
}
#launches all typical vi commands in notepad++
vi () {
    /cygdrive/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe -multiInst -nosession -noPlugin $(cygpath -w -- "$@")
}
